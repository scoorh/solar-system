cbuffer lmb 
{
	matrix vp;
};


Texture2D depthmap : register(t0);
Texture2D image : register(t1);
SamplerState st;


#define SUNSIZE 50


struct pin
{
	float4 p : SV_POSITION;
	float2 tc : TEXCOORD0;
	float4 l : TEXCOORD1;
	float4 nocl : TEXCOORD2;
};


float4 ps(pin input) : SV_Target
{
	float scale = input.nocl.z;		
	float4 c = 0;

	float depthVal = 1-(depthmap.Sample(st,input.tc).r);

	//trzeba sprawdziæ czy pozycja pixela jest mniejsza od s³oñca
	//jak tak to zwracamy kolor s³oñca bez maskowania
/*
	float4 pixelpos;
	pixelpos.x = (input.tc * 2.0f) - 1.0f;
	pixelpos.y = -((input.tc*2.0f)) - 1.0f;
	pixelpos.z = depthVal;
	pixelpos.w = 1.0f;

	float4 worldpixelpos = mul(pixelpos, vp);
	worldpixelpos /= worldpixelpos.w;

	if(worldpixelpos.z > input.l.z && input.l.w > 0) 
	{
		float2 coord;
		float size = SUNSIZE / scale;
		float2 center = input.l.xy;
		coord = .5 - ((input.tc - center) / size * .5);
		c += (pow(image.Sample(st,coord),2)*1)*2;
		return c;
	}
*/


	if(depthVal < input.l.z - .00025)
	{
		return c;
	}	

	if(input.l.w > 0) 
	{
		float2 coord;
		float size = SUNSIZE / scale;
		float2 center = input.l.xy;
		coord = .5 - ((input.tc - center) / size * .5);
		c += (pow(image.Sample(st,coord),2)*1)*2;
	}
	
	return c;
}